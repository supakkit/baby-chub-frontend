
// // src/views/SignIn.jsx
// // ‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ Nav/Footer ‡∏à‡∏≤‡∏Å Layout (‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡∏ï‡πå)
// // ‡πÉ‡∏ä‡πâ Tailwind + ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏µ‡∏à‡∏≤‡∏Å index.css ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô UI ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô

// import React, { useState } from "react";
// import { Link } from "react-router-dom";

// export const SignIn = () => {
//   const [email, setEmail] = useState("");
//   const [password, setPassword] = useState("");
//   const [submitting, setSubmitting] = useState(false);
//   const [error, setError] = useState("");
//   const [ok, setOk] = useState(false);

//   async function handleSubmit(e) {
//     e.preventDefault();
//     setError("");
//     setOk(false);

//     if (!email || !password) {
//       setError("Please fill in both email and password.");
//       return;
//     }

//     // TODO: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° API ‡∏à‡∏£‡∏¥‡∏á‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
//     setSubmitting(true);
//     await new Promise((r) => setTimeout(r, 600)); // mock ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô UX
//     setSubmitting(false);
//     setOk(true);
//   }

//   return (
//     <div className="min-h-[calc(100vh-8rem)] bg-[color:var(--background)] text-[color:var(--foreground)] flex items-start md:items-center justify-center px-4 py-8">
//       <div className="w-full max-w-md">
//         <div className="border border-[color:var(--border)] rounded-[var(--radius)] bg-[color:var(--card)] shadow-sm">
//           <form onSubmit={handleSubmit} className="p-6 md:p-8" noValidate>
//             <h1 className="text-2xl md:text-3xl font-bold text-center mb-6">Sign In</h1>

//             {/* Email */}
//             <label htmlFor="email" className="block text-sm font-medium mb-2">Email address</label>
//             <input
//               id="email"
//               type="email"
//               placeholder="e.g. name@example.com"
//               value={email}
//               onChange={(e) => setEmail(e.target.value)}
//               className="w-full h-11 px-4 rounded-md border border-[color:var(--input)] bg-white
//                          text-[color:var(--foreground)] placeholder:text-[color:var(--muted-foreground)]
//                          focus:outline-none focus:ring-2 focus:ring-[color:var(--ring)] focus:border-[color:var(--ring)]"
//               required
//             />

//             {/* Password */}
//             <label htmlFor="password" className="block text-sm font-medium mt-5 mb-2">Password</label>
//             <input
//               id="password"
//               type="password"
//               placeholder="Enter Your Password"
//               value={password}
//               onChange={(e) => setPassword(e.target.value)}
//               className="w-full h-11 px-4 rounded-md border border-[color:var(--input)] bg-white
//                          text-[color:var(--foreground)] placeholder:text-[color:var(--muted-foreground)]
//                          focus:outline-none focus:ring-2 focus:ring-[color:var(--ring)] focus:border-[color:var(--ring)]"
//               required
//             />

//             {error && <p className="mt-3 text-sm text-red-600" role="alert">{error}</p>}
//             {ok && !error && <p className="mt-3 text-sm" role="status">‚úÖ Signed in (mock). Replace with real API later.</p>}

//             <button
//               type="submit"
//               disabled={submitting}
//               className="mt-6 w-full h-11 rounded-md font-semibold
//                          bg-[color:var(--primary)] text-[color:var(--primary-foreground)]
//                          hover:opacity-90 disabled:opacity-60
//                          focus:outline-none focus-visible:ring-2
//                          focus-visible:ring-[color:var(--ring)] focus-visible:ring-offset-2"
//             >
//               {submitting ? "Signing in..." : "Sign In"}
//             </button>

//             <div className="mt-5 text-center text-sm">
//               <Link to="/signup" className="hover:underline hover:opacity-90">Create account</Link>
//               <span className="mx-1 text-[color:var(--muted-foreground)]">|</span>
//               <Link to="/forgot-password" className="hover:underline hover:opacity-90">Forgot password?</Link>
//             </div>
//           </form>
//         </div>
//       </div>
//     </div>
//   );
// };


// src/views/SignIn.jsx
// ‚úÖ UI ‡∏ò‡∏µ‡∏°‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á (‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏µ‡∏à‡∏≤‡∏Å index.css)
// ‚úÖ ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô
// ‚úÖ export ‡πÅ‡∏ö‡∏ö named

import { useState } from "react";
import { useNavigate, Link } from "react-router-dom";

export function SignIn() {
  // ------------------------------
  // üìå State ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡∏Ç‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
  // ------------------------------
  const [email, setEmail] = useState("");        // ‡∏Ñ‡πà‡∏≤ email
  const [password, setPassword] = useState("");  // ‡∏Ñ‡πà‡∏≤ password
  const [showPw, setShowPw] = useState(false);   // toggle ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
  const [error, setError] = useState("");        // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
  const [submitting, setSubmitting] = useState(false); // ‡∏Å‡∏±‡∏ô‡∏Å‡∏î‡∏ã‡πâ‡∏≥‡∏ï‡∏≠‡∏ô submit
  const [ok, setOk] = useState(false);           // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (mock)

  const navigate = useNavigate();

  // ------------------------------
  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handleSubmit (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Sign In)
  // ------------------------------
  const handleSubmit = async (e) => {
    e.preventDefault();

    // trim email (‡∏Å‡∏±‡∏ô‡πÄ‡∏ú‡∏•‡∏≠‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ) ‚Üí ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà trim password
    const emailValue = email.trim();
    const passwordValue = password;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!emailValue || !passwordValue) {
      setError("Please fill in both email and password.");
      return;
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    if (passwordValue.length < 6) {
      setError("Password must be at least 6 characters");
      return;
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const emailLike = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailLike.test(emailValue)) {
      setError("Please enter a valid email address.");
      return;
    }

    // ‚úÖ reset state error/success ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
    setError("");
    setOk(false);
    setSubmitting(true);

    try {
      // TODO: ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
      await new Promise((r) => setTimeout(r, 600)); // mock async
      setOk(true);

      // ‚û° ‡∏´‡∏•‡∏±‡∏á login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
      navigate("/", { replace: true });
    } catch {
      setError("Sign in failed. Please try again.");
    } finally {
      setSubmitting(false);
    }
  };

  return (
    // ------------------------------
    // üìå Layout: ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á + ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
    // ------------------------------
    <div className="min-h-[calc(100vh-8rem)] bg-[color:var(--background)] text-[color:var(--foreground)] flex items-start md:items-center justify-center px-4 py-8">
      <div className="w-full max-w-md">
        {/* üî≤ ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° */}
        <div className="border border-[color:var(--border)] rounded-[var(--radius)] bg-[color:var(--card)] shadow-sm">
          <form onSubmit={handleSubmit} className="p-6 md:p-8" noValidate>
            
            {/* ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ */}
            <h1 className="text-2xl md:text-3xl font-bold text-center mb-6">
              Sign In
            </h1>

            {/* ---------------- Email ---------------- */}
            <label htmlFor="email" className="block text-sm font-medium mb-2">
              Email
            </label>
            <input
              id="email"
              name="email"                  // ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢ password manager
              type="email"
              autoComplete="email"          // autoComplete email
              placeholder="e.g. name@example.com"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              aria-invalid={!!error}        // a11y: ‡πÅ‡∏à‡πâ‡∏á screen reader ‡∏ß‡πà‡∏≤‡∏°‡∏µ error
              className="w-full h-11 px-4 rounded-md border border-[color:var(--input)] bg-white
                         text-[color:var(--foreground)] placeholder:text-[color:var(--muted-foreground)]
                         focus:outline-none focus:ring-2 focus:ring-[color:var(--ring)] focus:border-[color:var(--ring)]"
              required
            />

            {/* ---------------- Password ---------------- */}
            <label htmlFor="password" className="block text-sm font-medium mt-5 mb-2">
              Password
            </label>
            <div className="relative">
              <input
                id="password"
                name="password"
                type={showPw ? "text" : "password"} // toggle show/hide
                autoComplete="current-password"
                placeholder="Enter Your Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                minLength={6}                // ‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß
                className="w-full h-11 pr-12 px-4 rounded-md border border-[color:var(--input)] bg-white
                           text-[color:var(--foreground)] placeholder:text-[color:var(--muted-foreground)]
                           focus:outline-none focus:ring-2 focus:ring-[color:var(--ring)] focus:border-[color:var(--ring)]"
                required
              />
              {/* ‡∏õ‡∏∏‡πà‡∏° Show/Hide password */}
              <button
                type="button"
                onClick={() => setShowPw((s) => !s)}
                className="absolute inset-y-0 right-2 my-auto text-sm px-2 rounded hover:opacity-80"
                aria-label={showPw ? "Hide password" : "Show password"}
              >
                {showPw ? "Hide" : "Show"}
              </button>
            </div>

            {/* ---------------- Error / Success message ---------------- */}
            {error && (
              <p className="mt-3 text-sm text-red-600" role="alert">
                {error}
              </p>
            )}
            {ok && !error && (
              <p className="mt-3 text-sm" role="status">
                ‚úÖ Signed in (mock). Replace with real API later.
              </p>
            )}

            {/* ---------------- ‡∏õ‡∏∏‡πà‡∏° Sign In ---------------- */}
            <button
              type="submit"
              disabled={submitting}          // disable ‡∏ï‡∏≠‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á
              className="mt-6 w-full h-11 rounded-md font-semibold
                         bg-[color:var(--primary)] text-[color:var(--primary-foreground)]
                         hover:opacity-90 disabled:opacity-60
                         focus:outline-none focus-visible:ring-2
                         focus-visible:ring-[color:var(--ring)] focus-visible:ring-offset-2"
            >
              {submitting ? "Signing in..." : "Sign In"}
            </button>

            {/* ---------------- ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ---------------- */}
            <div className="mt-5 text-center text-sm">
              {/* TODO: ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ route /signup */}
              <Link to="/signup" className="hover:underline hover:opacity-90">
                Create account
              </Link>
              <span className="mx-1 text-[color:var(--muted-foreground)]">|</span>
              {/* TODO: ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ route /forgot-password */}
              <Link to="/forgot-password" className="hover:underline hover:opacity-90">
                Forgot password?
              </Link>
            </div>

          </form>
        </div>
      </div>
    </div>
  );
}
