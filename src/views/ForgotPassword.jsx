// src/views/ForgotPassword.jsx
// ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å backend ‡∏à‡∏£‡∏¥‡∏á‡∏ú‡πà‡∏≤‡∏ô service: forgotPassword(email)
// ‚úÖ ‡πÅ‡∏™‡∏î‡∏á generic success message (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô account enumeration)
// ‚úÖ a11y: ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡πÑ‡∏õ‡∏ó‡∏µ‡πà banner ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

import { useEffect, useRef, useState } from "react";
import { useNavigate } from "react-router-dom";
import { forgotPassword } from "../services/userServices"; // ‚Üê ‡πÉ‡∏ä‡πâ service ‡∏à‡∏£‡∏¥‡∏á

export function ForgotPassword() {
  // -----------------------------
  // üìå State ‡∏ü‡∏≠‡∏£‡πå‡∏° + ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞/‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  // -----------------------------
  const [email, setEmail] = useState(""); // ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å
  const [submitting, setSubmitting] = useState(false); // ‡∏Å‡∏±‡∏ô‡∏Å‡∏î‡∏ã‡πâ‡∏≥/‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏´‡∏•‡∏î
  const [msg, setMsg] = useState({ type: "", text: "" }); // "ok" | "error" | "" (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå)
  const bannerRef = useRef(null); // ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡πÑ‡∏õ‡∏ó‡∏µ‡πà banner ‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  const navigate = useNavigate();

  // üîé regex ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏µ‡πÄ‡∏°‡∏•
  const emailLike = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

  // -----------------------------
  // üì® Submit Handler (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å service ‡∏à‡∏£‡∏¥‡∏á)
  // -----------------------------
  const onSubmit = async (e) => {
    e.preventDefault();

    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    setMsg({ type: "", text: "" });

    // Trim ‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏Å‡∏±‡∏ô‡∏¢‡∏¥‡∏á API ‡πÄ‡∏Å‡πâ‡∏≠)
    const emailTrim = email.trim();
    if (!emailTrim || !emailLike.test(emailTrim)) {
      setMsg({ type: "error", text: "Please enter a valid email address." });
      return;
    }

    setSubmitting(true);
    try {
      await forgotPassword(emailTrim); // üîó POST /auth/forgot-password

      // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à "generic"
      setMsg({
        type: "ok",
        text: "If the email is registered, we‚Äôve sent a password reset link. Please check your inbox (and spam).",
      });
    } catch {
      // ‡πÅ‡∏°‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ ‡∏Å‡πá‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ï‡∏≠‡∏ö generic message ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
      setMsg({
        type: "ok",
        text: "If the email is registered, we‚Äôve sent a password reset link. Please check your inbox (and spam).",
      });
    } finally {
      setSubmitting(false);
    }
  };

  // a11y: ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡πÑ‡∏õ‡∏ó‡∏µ‡πà banner ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏ä‡πà‡∏ß‡∏¢ screen reader)
  useEffect(() => {
    if (msg.text && bannerRef.current) {
      bannerRef.current.focus();
    }
  }, [msg]);

  return (
    <div className="min-h-[calc(100vh-8rem)] bg-[color:var(--background)] text-[color:var(--foreground)] flex items-start md:items-center justify-center px-4 py-8">
      <div className="w-full max-w-md">
        {/* ‚úÖ Success Banner (generic) ‚Äî ‡πÇ‡∏ó‡∏ô popover ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ SignUp */}
        {msg.type === "ok" && (
          <div
            ref={bannerRef}
            tabIndex={-1}
            className="mb-4 rounded-md border border-[color:var(--border)] bg-[color:var(--popover)] text-[color:var(--popover-foreground)] px-4 py-3 shadow-sm outline-none"
            role="status"
            aria-live="polite"
          >
            <div className="font-semibold">Password reset link sent</div>
            <p className="text-sm mt-1">{msg.text}</p>
          </div>
        )}

        {/* üî≤ ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏° ‚Äî ‡πÇ‡∏Ñ‡∏£‡∏á/‡∏™‡∏µ‡∏Å‡∏•‡∏°‡∏Å‡∏•‡∏∑‡∏ô‡∏Å‡∏±‡∏ö SignIn/SignUp */}
        <div className="border border-[color:var(--border)] rounded-[var(--radius)] bg-[color:var(--card)] shadow-sm">
          <form
            onSubmit={onSubmit}
            className="p-6 md:p-8"
            noValidate
            aria-busy={submitting}
          >
            <h1 className="text-2xl md:text-3xl font-bold text-center mb-1">
              Reset your password
            </h1>
            <p className="text-center text-sm mb-6 opacity-80">
              We will send you an email to reset your password
            </p>

            {/* ---------------- Email ---------------- */}
            <label htmlFor="email" className="block text-sm font-medium mb-2">
              Email address
            </label>
            <input
              id="email"
              type="email"
              autoComplete="email"
              placeholder="e.g. name@example.com"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              aria-invalid={msg.type === "error"}
              aria-describedby="fp-msg"
              className="w-full h-11 px-4 rounded-md border border-[color:var(--input)] bg-white
                         text-[color:var(--foreground)] placeholder:text-[color:var(--muted-foreground)]
                         focus:outline-none focus:ring-2 focus:ring-[color:var(--ring)] focus:border-[color:var(--ring)]"
              required
            />

            {/* ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error (validation) / status (‡∏≠‡∏∑‡πà‡∏ô‡πÜ) ‚Äî ‡πÉ‡∏ä‡πâ aria-live */}
            {msg.text && msg.type !== "ok" && (
              <p
                id="fp-msg"
                className={`mt-3 text-sm ${
                  msg.type === "error" ? "text-[color:var(--destructive)]" : ""
                }`}
                role={msg.type === "error" ? "alert" : "status"}
                aria-live="polite"
              >
                {msg.text}
              </p>
            )}

            {/* ---------------- ‡∏õ‡∏∏‡πà‡∏° Submit ---------------- */}
            <button
              type="submit"
              disabled={submitting}
              className="mt-6 w-full h-11 rounded-md font-semibold
                         bg-[color:var(--primary)] text-[color:var(--primary-foreground)]
                         hover:opacity-90 disabled:opacity-60
                         focus:outline-none focus-visible:ring-2
                         focus-visible:ring-[color:var(--ring)] focus-visible:ring-offset-2"
            >
              {submitting ? "Sending..." : "Submit"}
            </button>

            {/* ---------------- ‡∏õ‡∏∏‡πà‡∏° Cancel ---------------- */}
            <button
              type="button"
              onClick={() => navigate("/signin")}
              className="mt-3 w-full h-11 rounded-md border border-[color:var(--input)]
                         hover:opacity-90
                         focus:outline-none focus-visible:ring-2
                         focus-visible:ring-[color:var(--ring)] focus-visible:ring-offset-2"
            >
              Cancel
            </button>
          </form>
        </div>
      </div>
    </div>
  );
}
